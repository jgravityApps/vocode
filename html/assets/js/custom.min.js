/*
 * --------------------------------------------------------------------------
 * custom js
 * --------------------------------------------------------------------------
 */
var ON_HEROKU = false; 
if (location.host === 'vocode-app.herokuapp.com') ON_HEROKU = true;
else ON_HEROKU = false;
const ARR_TRACKS_NAME = ["cello-double", "cello-double-2", "cello-phrase", "orchestra", "organ-C3", "sax-phrase"];
const DIR_SOUND_SOURCE = '/sounds/sources/';
const DIR_SOUND_OUTPUT = '/sounds/output/';
var widthCnvs = 0;
var heightCnvs = 120;
var cnvs = new CnvsCtx();
cnvs.init();
cnvsCtx = cnvs.ctx();
cnvsCtx.fillStyle = 'rgba(155, 187, 89, 1)';
var wavesurfer;
var wavesurfer01;
var wavesurfer02;
var wavesurfer03;
const SIZE_FFT = 2048;
var RATE = 44100;
async function getRate() {
  RATE =  await eel.getGlobalVar(5)();
}
if (!ON_HEROKU) getRate();
var fft = new FFT(SIZE_FFT, RATE);
var spectrum = new  Uint8Array(SIZE_FFT);
var x = new Array();
var y = new Array();
var w = new Array();
var h = new Array();
const LIMITED_NUMBER = 100; 
const COUNTDOWNTIME = 3;
const MAX_SECOND_REC = 8;
const LIMIT_MIN_REC = 3;
var flgCountUp = false;
var isRecording = false;
var recfilePath = "";
var sampleVoicePath = "";
var baseSoundTrackPath = "";
var finalizePath = "";
const DIV_INDICATOR = '<div id="indicatorBG" style=""><i class="fas fa-spinner animRotate"></i></div>';
const DIV_INDICATOR_DIZZY = '<div id="indicatorBG" style=""><i class="far fa-dizzy iconL"></i></div>';
const BTN_CLOSE_ALERT = '<button id="btnCloseAlert" type="button" class="btn btn-secondary">close</button>';
var nSelectedTrackId = 0;
var nSelectedInput = 0;
const HEIGHT_WAV_ON_CARD = 80;
var language = (window.navigator.languages && window.navigator.languages[0]) || window.navigator.language || window.navigator.userLanguage || window.navigator.browserLanguage;
var lang = "en";
var jsonObj = new Object();
var fScrollTop = 0.0;
var isPreparingRec = false;
async function loadJson() {
  return jsonObj = await $.getJSON("/assets/includes/lang.json");
}
$(function() {
  loadJson().then(jsonObj => {
    function setLanguageSettings() {
      if (language === "ja" || language === "ja-JP") {
        lang = "ja";
      }
      else {
        lang = "en";
      }
      $("#logo").attr('alt', jsonObj.appName[lang]);
      $('#descMain').html(jsonObj.description[lang]);
      $('[notdefined="01"] span, [notdefined="02"] span').html(jsonObj.notDefined[lang]);
      $('#modalRecYourVoice i >').append(jsonObj.voiceTrack.btnRecYourVoice[lang]);
      $('#selectSampleVoice i >').append(jsonObj.voiceTrack.btnUseSampleVoice[lang]);
      $('#btnBaseTrackList i >').append(jsonObj.baseTrack.btnSelectSound[lang]);
      $('#recModal').find('.modal-title').html('<i class="fas fa-microphone-alt"></i>' + jsonObj.recordYourVoice.title[lang]);
      $('#settingsModal').find('.modal-title').html('<i class="fas fa-cogs"></i>' + jsonObj.settings.title[lang]);
      $('#viewSettings').find('h6').html('<i class="fas fa-microphone"></i>' + jsonObj.settings.inputDevice[lang]);
      $('#viewSettings .input-group-text').html(jsonObj.settings.chooseDevice[lang]);
      $('#pageAboutAppBody').html(jsonObj.aboutBody[lang]);
      $('#license').html(jsonObj.license[lang]);
      $('#pageSupportBody').html(jsonObj.supportBody[lang]);
      $("meta[name='description']").attr('content', jsonObj.meta.description[lang]);
      $("meta[name='twitter:title']").attr('content', jsonObj.sns.title[lang]);
      $("meta[name='twitter:description']").attr('content', jsonObj.sns.description[lang]);
      $("meta[property='og:title']").attr('content', jsonObj.sns.title[lang]);
      $("meta[property='og:description']").attr('content', jsonObj.sns.description[lang]);
    }
    setLanguageSettings();
    if (!ON_HEROKU) eel.browserReload();
    $('.notDefinedYet').css({'width': '100%', 'height': HEIGHT_WAV_ON_CARD, 'display': 'table'});
    async function apendBaseTrackList() {
      var arrTracksName = [];
      if (ON_HEROKU) {
        arrTracksName = ARR_TRACKS_NAME;
      }
      else {
        arrTracksName =  await eel.getArrayBaseSoundTracksName()();
      }
      var width = $('#btnBaseTrackList').innerWidth();
      for(var key in arrTracksName) {
        $('#baseTrackList').append('<li><a class="trackList" href="#" style="width: ' + width + 'px !important;"><i class="far fa-file-audio icon"></i>' + arrTracksName[key] +   '</a></li>');
      }
    }
    apendBaseTrackList();
    $('#baseTrackList').on('click', '.trackList', async function(){
      nSelectedTrackId = $('#baseTrackList a.trackList').index(this);
      console.log(nSelectedTrackId + 'th item clicked!');
      setBaseSoundTrackThenReturnPath(nSelectedTrackId);
    });
    async function setBaseSoundTrackThenReturnPath(nSelected){
      if (ON_HEROKU) {
        baseSoundTrackPath =  DIR_SOUND_SOURCE + ARR_TRACKS_NAME[nSelected] + '.wav';
      }
      else {
        baseSoundTrackPath = await eel.setBaseSoundTrack(nSelected)();
      }
      showCommViewVisibleWav(false, $('#viewVisibleWav02'), wavesurfer02);
      wavesurfer02 = waveSurferCommInit('#viewVisibleWav02', HEIGHT_WAV_ON_CARD);
      initCommWaveSurferMethod(wavesurfer02);
      showCommWavesurfer(baseSoundTrackPath, $('#viewVisibleWav02'), wavesurfer02);
      var selectedTitle = $('#baseTrackList li a.trackList').eq(nSelected).html();
      $('#btnBaseTrackList').html(selectedTitle);
      $(window).scrollTop(fScrollTop);
    }
    $('#btnBaseTrackList').on('click', function(){
      fScrollTop = $(window).scrollTop();
    });
    $('#selectSampleVoice').on('click', function(){
      setSampleVoiceThenReturnPath();
    });
    async function setSampleVoiceThenReturnPath(){
      if (ON_HEROKU) {
        sampleVoicePath = DIR_SOUND_SOURCE + 'singing-female.wav';
      }
      else {
        sampleVoicePath = await eel.setSampleVoice()();
      }
      showCommViewVisibleWav(false, $('#viewVisibleWav01'), wavesurfer01);
      wavesurfer01 = waveSurferCommInit('#viewVisibleWav01', HEIGHT_WAV_ON_CARD);
      initCommWaveSurferMethod(wavesurfer01);
      showCommWavesurfer(sampleVoicePath, $('#viewVisibleWav01'), wavesurfer01);
    }
    $('#doVocode').on('click', function(){
      showIndicator($('body'), 0);
      try {
        if (wavesurfer03.isPlaying()) {
          removeIndicator();
          showIndicator($('body'), 1);
          setTimeout(removeIndicator, 1000);
          return 0;
        }
      } catch (error) {
        console.log("error now playing")
      }
      vocodeThenReturnPath();
    })
    .dblclick(function(e) { 
      $(this).data('double', 2);
      detectedDoubleClick();
      return 0;
    });
    async function vocodeThenReturnPath(){
      if (ON_HEROKU) {
        var arrCheckFlg = [true, true];
        if (!sampleVoicePath || sampleVoicePath === "") {
          arrCheckFlg[1] = false;
        }
        if (!baseSoundTrackPath || baseSoundTrackPath === "") {
          arrCheckFlg[0] = false;
        }
        if (arrCheckFlg[0] && arrCheckFlg[1]) {
          var baseFileName = 'finalized';
          finalizePath = DIR_SOUND_OUTPUT + baseFileName + nSelectedTrackId + '.wav';
        }
        else { 
          alertSoundFileIsUnset(arrCheckFlg);
          setTimeout(removeIndicator, 500);
          return false;
        }
      }
      else {
        finalizePath = await eel.goMorphing()();
      }
      showCommViewVisibleWav(false, $('#viewVisibleWav03'), wavesurfer03);
      wavesurfer03 = waveSurferCommInit('#viewVisibleWav03', HEIGHT_WAV_ON_CARD);
      initCommWaveSurferMethod(wavesurfer03);
      showCommWavesurfer(finalizePath, $('#viewVisibleWav03'), wavesurfer03);
      setTimeout(removeIndicator, 500);
    }
    try { eel.expose(alertSoundFileIsUnset); }
    catch{}
    function alertSoundFileIsUnset(arrErrors) {
      var baseTrack = "";
      var voiceTrack = "";
      if (!arrErrors[1]) {
        voiceTrack = "voice track";
      }
      if (!arrErrors[0]) {
        baseTrack = "base track";
      }
      isBoth = false;
      if (baseTrack != "" && voiceTrack != "") isBoth = true;
      var conjunction = lang=='en'?(isBoth?" are":" is"):" が";
      showAlert(voiceTrack + (isBoth?", ":"") + baseTrack + conjunction + " " + jsonObj.messages.unsetTrack[lang]);
    }
    var countdownProc;
    $('#recordYourVoice').on('click', function(){
      isPreparingForRecording().then(isPreparingRec => {
        if (!isPreparingRec) {
          msgNotAllowRecording();
          return;
        }
        if (isRecording) {
          eel.stopRecording();
          removeViewClockTimer();
          viewCountdownBG(false);
          addDisplayNone($('.fa-stop-circle'));
          removeDisplayNone($('.fa-circle'));
          isRecording = false;
          return;
        }
        else {
          /*/ check user got output path
          if ( !checkCookie("OUTPATH_KEY") ) {
            return;
          }*/
          showViewVisibleWav(false);
          isRecording = true;
          addDisplayNone($('.fa-circle'));
          removeDisplayNone($('.fa-stop-circle'));
        }
        maxSecond = COUNTDOWNTIME;
        $('#viewRecTime').html("");
        viewCountdownBG(true);
        countdownProc = setInterval(function(){ 
          if (maxSecond === COUNTDOWNTIME) {
            addDisplayNone($('.fa-circle'));
            removeDisplayNone($('.fa-stop-circle'));
          }
          flgCountUp = false;
          var strNunber = (maxSecond === 0 ? "Fire!" : maxSecond);
          $('#viewCountdown').html(strNunber);
          if (maxSecond <= 0) {
            clearInterval(countdownProc);
            $('#viewCountdown').html('');
            if (flgCountUp) {
              $('#viewRecTime').html("00:00");
              clockTimer(flgCountUp, 0);
            }
            else {
              $('#viewRecTime').html("00:08");
              clockTimer(flgCountUp, MAX_SECOND_REC);
            }
            eel.recordYourVoice();
          }
          maxSecond -= 1
        },1000)
      });
    }).dblclick(function(e) { 
      $(this).data('double', 2);
      detectedDoubleClick();
      return 0;
    });
    function detectedDoubleClick() {
      console.log("double click");
      showIndicator($('body'), 1);
      setTimeout(removeIndicator, 1200);
    }
    function viewCountdownBG(YN) {
      if (YN) {
        $('.modal-body').addClass('bodyBG');
        var width = $('.modal-body').outerWidth();
        var height = $('.modal-body').outerHeight();
        var position = $('.modal-body').position();
        var positionSuper = $('.modal-content').position();
        $('#viewCountdown').css({'width': width, 'height': height, 'top': positionSuper.top+position.top, 'left': position.left, 'display': 'block'});
      }
      else {
        $('#viewCountdown').html('');
        $('.modal-body').removeClass('bodyBG');
      }
    }
      var clockTimerProc;
      function clockTimer(wantCountUp, beginSecond) {
        var min = 0;
        var sec = beginSecond;
        addDisplayNone($('.fa-circle'));
        removeDisplayNone($('.fa-stop-circle'));
        showCommViewVisibleWav(false, $('#viewVisibleWav01'), wavesurfer01);
        clockTimerProc = setInterval(function(){ 
          $('#viewCountdown').addClass('bgColorRed animFadeInOut');
          $('#recordYourVoice').addClass('animFadeInOut');
          var flgColor = false;
          if (wantCountUp) {
            sec++;
            if (sec == 60) {
              min++;
              sec = 0;
            }
            if ((min >= LIMIT_MIN_REC-1 && sec >= 55) || min >= LIMIT_MIN_REC) {
              flgColor = true;
            }
          }
          else {
            sec -= 1;
            if (sec <= 3) {
              flgColor = true;
            }
          }
          if (flgColor) {
            $('#viewRecTime').css('color', '#C3272B');
          }
          else {
            $('#viewRecTime').css('color', '#fff');
          }
          min = ( '00' + min ).slice(-2);
          sec = ( '00' + sec ).slice(-2);
          $('#viewRecTime').html(min + ":" + sec);
          if ( (!wantCountUp && sec <= 0) || (wantCountUp && min >= LIMIT_MIN_REC) ) {
            showIndicator($('body'), 0);
            eel.stopRecording();
            removeViewClockTimer();
          }
        },1000);
      }
      function removeViewClockTimer() {
        clearInterval(clockTimerProc);
        clearInterval(countdownProc);
        viewCountdownBG(false);
        $('#viewCountdown').removeClass('bgColorRed animFadeInOut');
        $('#recordYourVoice').removeClass('animFadeInOut');
        $('#viewRecTime').delay(1000).queue(function (next) {
          removeViewRecTime();
          next();
        });
        isRecording = false;
        setTimeout(removeIndicator, 100);
      }
      function removeViewRecTime() {
        $('#viewRecTime').html("");
        $('#viewRecTime').css('color', '#fff');
        addDisplayNone($('.fa-stop-circle'));
        removeDisplayNone($('.fa-circle'));
      }
    $('#modalRecYourVoice').on('click', function() {
      showIndicator($('body'), 0);
      $.when(
        cnvs.getWidthHeight()
      )
      .done(function() {
        if (!ON_HEROKU) eel.preparePlotAudioData();
        addDisplayNone($('.fa-pause-circle'));
        removeDisplayNone($('.fa-play-circle'));
        removeIndicator();
      })
      .fail(function() {
        console.log('error');
        removeIndicator();
      });
    });
    $('#recModal').on('DOMSubtreeModified propertychange', function() { 
      var display = $('#recModal').css('display');
      if (display === "none") removeRecModal();
    });
    function removeRecModal() {
      removeViewClockTimer();
      removeViewRecTime();
      if (!ON_HEROKU) eel.stopAudioCallback();
      cnvs.clearCanvas();
      showViewVisibleWav(false);
    }
    async function isPreparingForRecording(){
      if (ON_HEROKU) {
        return isPreparingRec = await false;
      }
      else {
        return isPreparingRec = await eel.isPreparingForRecording()();
      }
    }
    try { eel.expose(msgNotAllowRecording); }
    catch{}
    function msgNotAllowRecording() {
      showAlert(jsonObj.messages.notAllowRec[lang]);
    }
    function waveSurferInit(){
      wavesurfer = WaveSurfer.create({
        container: '#viewVisibleWav',
        waveColor: '#aaa',
        progressColor: '#333',
        height: heightCnvs,
        position: 'inhert',
        responsive: true
      });
      disableBtn($('#btnPlayReced'), true);
      disableBtn($('#btnBackward'), true);
    }
    waveSurferInit();
    function showWavesurfer() {
      $.when(
        showViewVisibleWav(true)
      )
      .done(function() {
        if (!recfilePath) showAlert(jsonObj.messages.filenotfound[lang]); 
        wavesurfer.load(recfilePath);
      })
      .fail(function() {
        console.log('visible wave error');
      });
    }
    function showViewVisibleWav(YN) {
      if (YN) {
        $('#viewVisibleWav').removeClass('displayNone');
        $('#viewVisibleWav').attr('height', heightCnvs);
      }
      else {
        try {
          $('#viewVisibleWav').trigger('click');
          $('#viewVisibleWav').find('canvas').each( function( index, element ) {
          var width = $('#viewVisibleWav').outerWidth();
          var context = element.getContext("2d");
          context.clearRect(0, 0, width, heightCnvs);
        });
      }
      catch(e) {
      }
        addDisplayNone($('.fa-pause-circle'));
        removeDisplayNone($('.fa-play-circle'));
        disableBtn($('#btnPlayReced'), true);
        disableBtn($('#btnBackward'), true);
        $('#viewVisibleWav').addClass('displayNone');
      }
    }
    $('[data-toggle=confirmation]').confirmation({ 
      title: jsonObj.recordYourVoice.closeConfirmWavsurfer[lang],
      rootSelector: '[data-toggle=confirmation]',
      onConfirm: function(value) {
        wavesurfer.empty();
        showViewVisibleWav(false);
      },
      onCancel: function() {
      },
    });
    wavesurfer.on('ready', function () {
      $('#viewVisibleWav > wave').css({'opacity': 0.9, 'background-color': '#fff'});
      disableBtn($('#btnPlayReced'), false);
      disableBtn($('#btnBackward'), false);
      wavesurfer01 = waveSurferCommInit('#viewVisibleWav01', HEIGHT_WAV_ON_CARD);
      initCommWaveSurferMethod(wavesurfer01);
      showCommWavesurfer(recfilePath, $('#viewVisibleWav01'), wavesurfer01);
    });
    function playReced() {
      wavesurfer.play();
      addDisplayNone($('.fa-play-circle'));
      removeDisplayNone($('.fa-pause-circle'));
    }
    function pauseReced() {
      wavesurfer.pause();
      addDisplayNone($('.fa-pause-circle'));
      removeDisplayNone($('.fa-play-circle'));
    }
    function stopReced() {
      wavesurfer.stop();
      addDisplayNone($('.fa-pause-circle'));
      removeDisplayNone($('.fa-play-circle'));
    }
    wavesurfer.on('finish', function () {
      stopReced();
    });
    $('#viewVisibleWav').on('click', function () {
      pauseReced();
    }).dblclick(function(e) {
      $(this).data('double', 2);
      playReced();
    });
    $('#btnPlayReced').on('click', function () {
      if ($(this).hasClass('disabled')) return;
      if (wavesurfer.isPlaying()) {
        pauseReced();
      }
      else {
        playReced();
      }
    });
    $('#btnBackward').on('click', function () {
      if ($(this).hasClass('disabled')) return;
      wavesurfer.seekTo(0);
    });
    $('.disabled').on('click', function () {
      console.log("disable button");
      return;
    });
    function waveSurferCommInit(elmName, height){
      return WaveSurfer.create({
        container: elmName,
        waveColor: '#aaa',
        progressColor: '#333',
        height: height,
        position: 'inhert',
        responsive: true
      });
    }
    function showCommWavesurfer(filePath, elm, obj) {
      $.when(
        showCommViewVisibleWav(true, elm, obj)
      )
      .done(function() {
        if (!filePath) showAlert(jsonObj.messages.filenotfound[lang]); 
        try {
          obj.load(filePath);
        } catch(e) {
          console.log('error common wavesurfer load');
        }
      })
      .fail(function() {
        console.log('visible wave error');
      });
    }
    function showCommViewVisibleWav(YN, elm, obj) {
      if (YN) {
        elm.removeClass('displayNone');
        elm.attr('height', elm.outerHeight());
      }
      else {
        try {
          var elmName = elm.attr('id');
          commStop(elmName, obj);
        }
        catch(e) {
        }
        try {
          elm.find('canvas').each( function( index, element ) {
            var width = elm.outerWidth();
            var height = elm.outerHeight();
            var context = element.getContext("2d");
            context.clearRect(0, 0, width, height);
          });
        }
        catch(e) {
        }
        try {
          obj.empty();
        }
        catch (e) {
        }
        elm.html('');
        switchHundleBtnShowing(false, elm);
      }
    }
    function initCommWaveSurferMethod(obj) {
      obj.on('ready', function () {
        var elmName = "";
        switch (obj) {
          case wavesurfer01:
            elmName = '#viewVisibleWav01';
            break;
          case wavesurfer02:
            elmName = '#viewVisibleWav02';
            break;
          case wavesurfer03:
            elmName = '#viewVisibleWav03';
            commPlay(elmName, wavesurfer03);
            var elmDL = '[dl=' + $('.dl').attr('dl') + ']';
            $(elmDL + ' a').attr('href', finalizePath);
            if (isTheBrowserDownloadAttrSupported()) {
              var date = new Date();
              var day = ("00" + (date.getMonth()+1)).slice( -2 ) + ("00" + date.getDate()).slice( -2 ) + ("00" + date.getHours()).slice( -2 ) + ("00"   + date.getMinutes()).slice(   -2 ) + ("00" + date.getSeconds()).slice( -2 );
              $(elmDL + ' a').attr('download', "finilized_" + day + ".wav");
              $(elmDL).removeClass('displayNone');
            }
            else {
            }
            break;
          default:
            break;
        }
        switchHundleBtnShowing(true, $(elmName));
        setHunleBtnPosition(elmName);
      });
      obj.on('finish', function () {
        var elmName = "";
        switch (obj) {
          case wavesurfer01:
            elmName = '#viewVisibleWav01';
            break;
          case wavesurfer02:
            elmName = '#viewVisibleWav02';
            break;
          case wavesurfer03:
            elmName = '#viewVisibleWav03';
            break;
          default:
            break;
        }
        var thisName = '[playWave=' + $(elmName).prev('div').attr('playWave') + ']';
        commStop(thisName, obj);
      });
    }
    function setHunleBtnPosition(elmName){
      var middle = $('.card-header').outerHeight() + parseInt($('.card-body').css('padding-top')) + $(elmName).attr('height')/2;
      var center = $(elmName).width() / 2;
      var elmBack0 = '[backTo0=' + $(elmName).prev().prev().attr('backTo0') + ']';
      var left = center - $(elmBack0).width()/2;
      var top = middle - $(elmBack0).height()/2;
      $(elmBack0).css({'position': 'absolute', 'top': top, 'left': left, 'z-index': 5});
      var iconWidth = $(elmBack0).outerWidth();
      var elmPlayWave = '[playWave=' + $(elmName).prev('div').attr('playWave') + ']';
      $(elmPlayWave).css({'position': 'absolute', 'top': top, 'left': iconWidth + left, 'z-index': 6});
    }
    function switchHundleBtnShowing(YN, elm) {
      if (YN) {
        var elmNotDefined = '[notdefined=' + elm.prev().prev().prev().attr('notdefined') + ']';
        var elmBack0 = '[backTo0=' + elm.prev().prev().attr('backTo0') + ']';
        var elmPlayWave = '[playWave=' + elm.prev('div').attr('playWave') + ']';
        addDisplayNone($(elmPlayWave + ' .fa-pause-circle'));
        removeDisplayNone($(elmPlayWave + ' .fa-play-circle'));
        $(elmNotDefined).addClass('displayNone');
        $(elmBack0).removeClass('displayNone');
        $(elmPlayWave).removeClass('displayNone');
      }
      else {
        var elmNotDefined = '[notdefined=' + elm.prev().prev().prev().attr('notdefined') + ']';
        var elmBack0 = '[backTo0=' + elm.prev().prev().attr('backTo0') + ']';
        var elmPlayWave = '[playWave=' + elm.prev('div').attr('playWave') + ']';
        $(elmNotDefined).removeClass('displayNone');
        $(elmBack0).addClass('displayNone');
        $(elmPlayWave).addClass('displayNone');
      }
    }
    function commStop(elmName, obj) {
      obj.stop();
      addDisplayNone($(elmName + ' .fa-pause-circle'));
      removeDisplayNone($(elmName + ' .fa-play-circle'));
    }
    function commPause(elmName, obj) {
      obj.pause();
      addDisplayNone($(elmName + ' .fa-pause-circle'));
      removeDisplayNone($(elmName + ' .fa-play-circle'));
    }
    function commPlay(elmName, obj) {
      obj.play();
      addDisplayNone($(elmName + ' .fa-play-circle'));
      removeDisplayNone($(elmName + ' .fa-pause-circle'));
    }
    $('#viewVisibleWav01, #viewVisibleWav02, #viewVisibleWav03').on('click touchmove', function () {
      /*var obj;
      switch ($(this).attr('id')) {
        case 'viewVisibleWav01':
        obj = wavesurfer01;
          break;
        case 'viewVisibleWav02':
          obj = wavesurfer02;
          break;
        case 'viewVisibleWav03':
          obj = wavesurfer03;
          break;
        default:
          break;
      }
      var thisName = '[playWave=' + $(this).prev('div').attr('playWave') + ']';
      commPause(thisName, obj);*/
      clickVisibleWave($(this));
    })
    .dblclick(function(e) {
      /*var thisName = '[playWave=' + $(this).prev('div').attr('playWave') + ']';
      $(this).data('double', 2);
      var obj;
      switch ($(this).attr('id')) {
        case 'viewVisibleWav01':
        obj = wavesurfer01;
          break;
        case 'viewVisibleWav02':
          obj = wavesurfer02;
          break;
        case 'viewVisibleWav03':
          obj = wavesurfer03;
          break;
        default:
          break;
      }
      commPlay(thisName, obj);*/
      doubleClickTapToPlay($(this));
    });
    var tapped = false;
    $('#viewVisibleWav01, #viewVisibleWav02, #viewVisibleWav03').on("touchend",function(e) {
      if (!tapped) {
        tapped = setTimeout(function() {
          clickVisibleWave($(this));
          tapped = false;
        },350);
      }
      else {
        clearTimeout(tapped); 
        tapped = false;
        doubleClickTapToPlay($(this));
      }
      e.preventDefault();
    });
    function clickVisibleWave(elm) {
      var obj;
      switch (elm.attr('id')) {
        case 'viewVisibleWav01':
        obj = wavesurfer01;
          break;
        case 'viewVisibleWav02':
          obj = wavesurfer02;
          break;
        case 'viewVisibleWav03':
          obj = wavesurfer03;
          break;
        default:
          break;
      }
      var thisName = '[playWave=' + elm.prev('div').attr('playWave') + ']';
      commPause(thisName, obj);
    }
    function doubleClickTapToPlay(elm) {
      var thisName = '[playWave=' + elm.prev('div').attr('playWave') + ']';
      elm.data('double', 2);
      var obj;
      switch (elm.attr('id')) {
        case 'viewVisibleWav01':
        obj = wavesurfer01;
          break;
        case 'viewVisibleWav02':
          obj = wavesurfer02;
          break;
        case 'viewVisibleWav03':
          obj = wavesurfer03;
          break;
        default:
          break;
      }
      commPlay(thisName, obj);
    }
    $('.btnPlay').on('click', function () {
      var nextElmId = $(this).next('div').attr('id');
      var thisName = '[playWave=' + $(this).attr('playWave') + ']';
      var  obj;
      if (nextElmId.match(/01/)) { 
        obj =  wavesurfer01;
      }
      else if (nextElmId.match(/02/)) { 
        obj = wavesurfer02;
      }
      else if (nextElmId.match(/03/)) { 
        obj = wavesurfer03;
      }
      if (obj.isPlaying()) {
        commPause(thisName, obj);
      }
      else {
        commPlay(thisName, obj);
      }
    });
    $('.btnBack0').on('click', function () {
      var nextnextElmId = $(this).next().next().attr('id');
      var  obj;
      if (nextnextElmId.match(/01/)) { 
        obj =  wavesurfer01;
      }
      else if (nextnextElmId.match(/02/)) { 
        obj = wavesurfer02;
      }
      else if (nextnextElmId.match(/03/)) { 
        obj = wavesurfer03;
      }
      obj.seekTo(0);
    });
 
    try { eel.expose(setRecordedFilePath); }
    catch{}
    function setRecordedFilePath(path) {
      recfilePath = path; 
      showWavesurfer();
    }
    $('#btnSettings').on('click', function () {
      $.when(
        setArrAudioInputs()
      )
      .done(function() {
      $('[name=nameInputList]').val(nSelectedInput);
      })
      .fail(function() {
        console.log('get input device error');
      });
    });
    async function setArrAudioInputs() {
      var arrInputDevices = [];
      if (ON_HEROKU) {
        var arrTmp = [{ name:'not supported'}];
        arrInputDevices =  await arrTmp;
      }
      else {
        arrInputDevices =  await eel.getArrAudioInputs()();
      }
      var option ="";
      for (var i = 0; i < Object.keys(arrInputDevices).length; i++) {
        var name = arrInputDevices[i]["name"];
        option += '<option value="'+i+'">'+name+'</option>';
      }
      $('#inputList').html(option);
    }
    $('[name=nameInputList]').change(function() {
      nSelectedInput =  parseInt( $('[name=nameInputList]').val() );
      if (!ON_HEROKU) eel.setAudioInputdevicesNumber(nSelectedInput);
    });
    $('[id^="page"]').on('show.bs.modal', function () {
      $(this).find('.modal-body').removeAttr('style');
      $(this).find('.modal-dialog').css({
        'margin': '0'
      });
      var height = $(window).innerHeight();
      $(this).find('.modal-content').css({
        'max-width': '100%',
        'height': height
      });
    });
    function buildDownloadPage() {
      $('#pageDownloadBody').append('<p>'+jsonObj.downloadBody.leadTxt[lang]+'<p>');
      if (isTheBrowserDownloadAttrSupported()) {
        $('#pageDownloadBody').append('<section id="areaDL"></section>');
        $('#areaDL').append('<div class="text-center"><a href="/download/macos/latest/vocode.app.zip" download="vocode.app.zip"><i class="fas fa-download"></i>download desktop app.</a></div>');
        $('#areaDL').append('<div class="text-center txtAttension">'+jsonObj.downloadBody.versionTxt[lang]+jsonObj.appName+' '+jsonObj.appVer  +'</div>');
        $('#areaDL').append('<div class="text-center txtAttension">'+jsonObj.downloadBody.requiredTxt[lang]+'</div>');
        $('#pageDownloadBody').append('<p>'+jsonObj.downloadBody.note[lang]+'<p>');
        $('#pageDownloadBody').append(jsonObj.downloadBody.command);
      }
    }
    function setURLforSNS() {
      $('.nav-twitter').attr("href", "http://twitter.com/share?url="+jsonObj.appURL);
      $('.nav-facebook').attr("href", "https://www.facebook.com/sharer/sharer.php?u="+jsonObj.appURL);
    }
    setURLforSNS();
    function gAnalytics() {
      var gAnalyticsScript = "";
      getGAnalytics().then(gAnalyticsScript => {
        $('head').append(gAnalyticsScript);
      });
    }
    async function getGAnalytics(){
      if (ON_HEROKU) {
        return jsonObj.gAnalytics;
      }
      else {
        return await eel.getGAnalytics()();
      }
    }
    function gAd() {
      var gadScript = "";
      getGAds(0).then(gadScript => {
        $('.gAd').html(gadScript);
        /*var elm = document.getElementsByClassName("gAd")
        elm[0].innerHTML = '';*/
      });
    }
    async function getGAds(nType){
      if (ON_HEROKU) {
        return jsonObj.gAds;
      }
      else {
        return await eel.getGAds(nType)();
      }
    }
    /*/ check cookie
    function checkCookie(key) {
      if ($.cookie(key) == undefined) {
        $('#settingsModal').modal('show');
        return false;
      }
      else {
        return true;
      }
    }*/
    function setOpacity(elm, value) {
      $(elm).css('opacity', value);
    }
    function showIndicator(elm, nType) {
      var width = elm.outerWidth();
      var height = elm.outerHeight();
      var position = elm.position();
      var offset = elm.offset();
      var html;
      if (width < 1) {
        width = $(window).innerWidth();
      }
      if (height < 1) {
        height = $(window).innerHeight();
      }
      switch (nType) {
        case 0:
          html = (DIV_INDICATOR);
          break;
        case 1:
          html = (DIV_INDICATOR_DIZZY);
          break;
        default:
          break;
      }
      $.when(
        elm.prepend(html)
      )
      .done(function() {
        $('#indicatorBG').css({'width': width, 'height': height, 'top': offset.top + position.top, 'left': position.left});
        $('#indicatorBG').addClass('indicatorBGDetail');
      })
      .fail(function() {
        console.log('indicator error');
      });
    }
    function removeIndicator() {
      console.log("remove indicator");
      $('#indicatorBG').remove();
    }
    function addDisplayNone(elm) {
      elm.addClass('displayNone');
    }
    function removeDisplayNone(elm) {
      elm.removeClass('displayNone');
    }
    function disableBtn(elm, YN) {
      if (YN) { 
        elm.addClass("disabled");
      }
      else {
        elm.removeClass("disabled");
      }
    }
    function addCloseAlertButton() {
      $('.alert').html(BTN_CLOSE_ALERT);
    }
    addCloseAlertButton();
    function showAlert(msg){
      $('.alert').removeClass('displayNone');
      $('.alert').removeClass('alert-remove');
      var width = $('#doVocode').innerWidth() /2;
      $('#btnCloseAlert').css('width', width);
      var top = $(window).scrollTop();
      $('.alert').css('top', top);
      var msgNotAllowRec = "";
      if (msg === jsonObj.messages.notAllowRec[lang]) {
        msgNotAllowRec = '<br><a data-toggle="modal" data-target="#pageDownload" href="#"><i class="fas fa-link iconWhite"></i>'+jsonObj.messages.openPageDL[lang]+'</a>';
      }
      $('.alert').prepend('<p><i class="fas fa-exclamation-triangle iconWhite"></i>'+msg+msgNotAllowRec+'</p>');
      $('.alert').alert();
    }
    $('.alert').on('click', function () {
      $('.alert').addClass('alert-remove');
      $('.alert').addClass('displayNone');
      $('.alert').html(BTN_CLOSE_ALERT);
    });
    function isTheBrowserDownloadAttrSupported() {
      var userAgent = window.navigator.userAgent.toLowerCase();
      var isSupport = false;
      if(userAgent.indexOf('msie') != -1 || userAgent.indexOf('trident') != -1) {
          isSupport = false;
      }
      else if(userAgent.indexOf('edge') != -1) {
          isSupport = true;
      }
      else if(userAgent.indexOf('chrome') != -1) {
          isSupport = true;
      }
      else if(userAgent.indexOf('safari') != -1) {
          isSupport = true;
      }
      else if(userAgent.indexOf('firefox') != -1) {
          isSupport = true;
      }
      else if(userAgent.indexOf('opera') != -1) {
          isSupport = false;
      } else {
          isSupport = false;
      }
      if (userAgent.indexOf('iphone') != -1 || userAgent.indexOf('ipad') != -1 || userAgent.indexOf('android') != -1 || userAgent.indexOf('mobile') != -1) {
        isSupport = false;
      }
      return isSupport;
    }
    /*/ history-back, reload
    history.replaceState(null, document.getElementsByTagName('title')[0].innerHTML, null);
    window.addEventListener('popstate', function() {
      eel.browserReload();
    }, false);*/
    /* arigato burnworks/ga-cookie-opt-in-js:
    https://github.com/burnworks/ga-cookie-opt-in-js/blob/master/src/js/ga-cookie-opt-in.js
    */
    var cookieOptin = "";
    async function getCookieOptIn() {
      return cookieOptin = await localStorage.getItem('ga_cookie_opt_in');
    }
    function setCookieAccepption() {
      if(cookieOptin == 'no') {
        console.log('ga_cookie_opt_in = no / ga-disable = true');
        window['ga-disable-UA-125578119-1'] = true;
        (adsbygoogle=window.adsbygoogle||[]).requestNonPersonalizedAds=1;
        (adsbygoogle=window.adsbygoogle||[]).pauseAdRequests=0;
      }
      else if(cookieOptin == 'yes') {
        console.log('ga_cookie_opt_in = yes');
        window['ga-disable-UA-125578119-1'] = false;
        (adsbygoogle=window.adsbygoogle||[]).requestNonPersonalizedAds=0;
        (adsbygoogle=window.adsbygoogle||[]).pauseAdRequests=0;
      }
      else {
        console.log('ga_cookie_opt_in = null');
        window['ga-disable-UA-125578119-1'] = true;
        (adsbygoogle=window.adsbygoogle||[]).pauseAdRequests=1;
        var accept = document.createElement('div');
            accept.setAttribute('class', 'cookie-accept-bar');
            accept.setAttribute('id', 'barCookieAccept');
            accept.innerHTML = '<p><i class="fas fa-exclamation-triangle iconWhite"></i>'+jsonObj.GDPR.description[lang]+' <a href="https://policies.google.com/technologies/partner-sites" target="_blank"><i class="fas fa-link iconWhite"></i>'+jsonObj.GDPR.policy[lang]+'</a><p><button id="btnCookieAccept" class="btn cookie-accept-btn"><i class="fas fa-check iconWhite"></i>'+jsonObj.GDPR.btnAccept[lang]+'</button><button id="btnCookieDeny" class="btn cookie-accept-btn cookie-deny-btn"><i class="fas fa-times iconWhite"></i>'+jsonObj.GDPR.btnDeny[lang]+'</button></p>';
        var elmCAB = document.getElementById("viewCookieAcceptBar");
        elmCAB.appendChild(accept);
        barCookieAcceptFollowWindowResize();
      }
      var acceptBtn = document.getElementById('btnCookieAccept');
      var denyBtn   = document.getElementById('btnCookieDeny');
      if(acceptBtn) {
        acceptBtn.onclick = function() {
          localStorage.setItem('ga_cookie_opt_in','yes');
          reloadWithAnimation('barCookieAccept', 400);
        };
      }
      if(denyBtn) {
        denyBtn.onclick = function() {
          localStorage.setItem('ga_cookie_opt_in','no');
          reloadWithAnimation('barCookieAccept', 400);
        };
      }
      function reloadWithAnimation(strId, nTime) {
        document.getElementById(strId).classList.add('state-remove');
        window.setTimeout('window.location.reload(false)', nTime);
      }
    }
    var timerCookieBar = false;
    function cookieAccepption() {
      getCookieOptIn().then(cookieOptin => {
        if (timerCookieBar !== false) clearTimeout(timerCookieBar);
        timerCookieBar = setTimeout(function() {
          setCookieAccepption();
        }, 8000);
      });
    }
    var timerResize = false;
    $(window).on('resize', function() {
      if (timerResize !== false) clearTimeout(timerResize);
      timerResize = setTimeout(function() {
        barCookieAcceptFollowWindowResize();
      }, 400);
    });
    var timerScroll = false;
    $(window).on('scroll', function() {
      if (timerScroll !== false) clearTimeout(timerScroll);
      timerScroll = setTimeout(function() {
        var fScrollTop = $(this).scrollTop();
        barCookieAcceptFollowWindowResize(fScrollTop);
        alertDialogBodyFollowWindowResize(fScrollTop);
      }, 400);
    });
    function barCookieAcceptFollowWindowResize(fScrollTop) {
      var fScroll = fScrollTop ? fScrollTop : 0;
      var height = window.innerHeight;
      var elmBCA = document.getElementById('barCookieAccept');
      if (elmBCA) elmBCA.setAttribute('style', 'top: '+(height - elmBCA.offsetHeight + fScroll)+'px;');
    }
    function alertDialogBodyFollowWindowResize(fScrollTop) {
      var fScroll = fScrollTop ? fScrollTop : 0;
      var elmAlert = $('.alert');
      if (elmAlert) elmAlert.css('top', fScroll);
    }
    isPreparingForRecording().then(isPreparingRec => {
      if (!isPreparingRec) { 
        $('#navbarNav ul.navbar-nav  :nth-of-type(3)').removeClass('displayNone');
        buildDownloadPage();
        gAnalytics();
        gAd();
        cookieAccepption();
      }
    });
  });
});
function CnvsCtx(){
  this.init = function(){
    $('.modal-body').css('height', heightCnvs);
    this.setCanvasSize(heightCnvs);
  };
  this.getWidthHeight = function(){
    widthCnvs = $('.modal-body').innerWidth();
    this.setCanvasSize(heightCnvs);
    $('#recMicInput').css({'top':0, 'left':0});
    $('#recMicInput').css({'position':'absolute'});
    $('#recMicInput').on('load', function() {
      widthCnvs = $('.modal-body').innerWidth();
      this.setCanvasSize(heightCnvs);
    });
  };
  this.ctx = function (){
    return $('#recMicInput')[0].getContext("2d");
  };
  this.drawVisualizer = function (x, y, w, h, nHAbillity) {
    cnvsCtx.fillStyle = 'rgba(155, 187, 89, 1)';
    for(var i = 0; i < nHAbillity; i++) {
      cnvsCtx.fillRect (x[i], y[i] , w[i], h[i]);
    }
  };
  this.setCanvasSize = function (height) {
    $('.modal-body').css('height', height);
    $('#recMicInput').attr('height', height);
    heightCnvs = height;
  };
  this.clearCanvas = function () {
    cnvsCtx.clearRect(0, 0, widthCnvs, heightCnvs);
  };
}
try { eel.expose(plotAudioData); }
catch{}
function plotAudioData(buffer) {
  if (widthCnvs === 0 || heightCnvs === 0) cnvs.getWidthHeight();
  cnvs.clearCanvas();
  fft.forward(buffer);
  spectrum = fft.spectrum;
  var barWidth =   Math.ceil(widthCnvs / LIMITED_NUMBER);
  var persent = "";
  for(var i = 0; i < LIMITED_NUMBER; i++) {
    var freqData = Math.abs(spectrum[i]);
    if(!freqData) freqData = 0;
    else persent = freqData / heightCnvs;
    var height = Math.ceil(heightCnvs * persent * 100000); 
    var offset = Math.ceil(heightCnvs - height); 
    x[i] = parseInt( i * barWidth );
    y[i] = parseInt( offset );
    w[i] = parseInt( barWidth);
    h[i] = parseInt( height );
  }
  cnvs.drawVisualizer(x, y, w, h, LIMITED_NUMBER);
}
